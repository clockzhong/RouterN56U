# Sample dhcp6c configuration file (/etc/dhcp6c.conf)
# Values shown are defaults
#
# NB! Major limitation of busybox applet
#  - both keyword & it's arguments MUST reside on the same line

# Interface statement
#  An interface statement specifies configuration parameters on the interface.
#  The generic format of an interface statement is as follows:
#
#  interface interface { substatements };
#     send send-options ;
#			This statement specifies DHCPv6 options to be sent to the
#			server(s).  Some options can only appear in particular
#			messages according to the specification, in which case
#			the appearance of the options is limited to be compliant
#			with the specification.
#
#			send-options is a comma-separated list of options, each
#			of which should be specified as described above. Multiple
#			send statements can also be specified, in which case
#			all the specified options will be sent.
#
#	rapid-commit
#			When rapid-commit is specified, dhcp6c will include a
#			rapid-commit option in solicit messages and wait for an
#			immediate reply instead of advertisements.
#	ia-pd ID
#			When ia-pd is specified, dhcp6c will initiate prefix del-
#			egation as a requesting router by including an IA_PD
#			option with the specified ID in solicit messages.
#	ia-na ID
#			When ia-na is specified, dhcp6c will initiate stateful
#			address assignment by including an IA_NA option with the
#			specified ID in solicit messages.
#	authentication authname
#			means an authentication option. authname is a string specifying
#			parameters of the authentication protocol. An authentication
#			statement for authname must be provided.
#			In either case, a corresponding identity association
#			statement must exist with the same ID.
#
#     request request-options;
#			This statement specifies DHCPv6 options to be included in
#			an option-request option. request-options is a comma
#			separated list of options, which can consist of the fol-
#			lowing options.
#
#		domain-name-servers
#			requests a list of Domain Name Server addresses.
#		domain-name
#			requests a DNS search path.
#		ntp-servers
#			requests a list of NTP server addresses. As of
#			this writing, the option type for this option is
#			not officially assigned. dhcp6c will reject this
#			option unless it is explicitly built to accept
#			the option.
#		sip-server-address
#			requests a list of SIP server addresses.
#		sip-domain-name
#			requests a SIP server domain name.
#		nis-server-address
#			requests a list of NIS server addresses.
#		nis-domain-name
#			requests a NIS domain name.
#		nisp-server-address
#			requests a list of NIS+ server addresses.
#		nisp-domain-name
#			requests a NIS+ domain name.
#		bcmcs-server-address
#			requests a list of BCMCS server addresses.
#		bcmcs-domain-name
#			requests a BCMCS domain name.
#		refreshtime
#			means an information refresh time option. This
#			can only be specified when sent with information
#			request messages; dhcp6c will ignore this option
#			for other messages.
#			Multiple request statements can also be specified, in
#			which case all the specified options will be requested.
#     information-only;
#  			This statement specifies dhcp6c to only exchange informa-
#			tional configuration parameters with servers. A list of
#			DNS server addresses is an example of such parameters.
#			This statement is useful when the client does not need
#			stateful configuration parameters such as IPv6 addresses
#			or prefixes.
#     script "script-name";
#			This statement specifies a path to script invoked by
#			dhcp6c on a certain condition including when the daemon
#			receives a reply message. script-name must be the absolute
#			path from root to the script file, be a regular
#			file, and be created by the same owner who runs the daemon.
#
# Identity association statement
#  Identity association (IA) is a key notion of DHCPv6. An IA is uniquely
#  identified in a client by a pair of IA type and IA identifier (IAID). An
#  IA is associated with configuration information dependent on the IA type.
#  An identity association statement defines a single IA with some client-
#  side configuration parameters. Its format is as follows:
#
#  id-assoc type [ID] { substatements };
#		type is a string for the type of this IA. The current implemen-
#		tation supports <oq>na<cq> (non-temporary address allocation) <oq>pd<cq>
#		(prefix delegation) for the IA type. ID is a decimal number of
#		IAID. If omitted, the value 0 will be used by default.
#		substatements is a sequence of statements that specifies configu-
#		ration parameters for this IA. Each statement may or may not be
#		specific to the type of IA.
#
#	The followings are possible substatements for an IA of type na.
#     address ipv6-address pltime [vltime];
#			specifies an address and related parameters that the
#			client wants to be allocated. Multiple addresses can be
#			specified, each of which is described as a separate
#			address substatement. dhcp6c will include all the
#			addresses (and related parameters) in Solicit messages,
#			as an IA_NA prefix option encapsulated in the correspond-
#			ing IA_NA option. Note, however, that the server may or
#			may not respect the specified prefix parameters.
#	The followings are possible substatements for an IA of type pd.
#     prefix_interface_statement
#			specifies the client's local configuration of how dele-
#			gated prefixes should be used (see below).
#     prefix ipv6-prefix pltime [vltime];
#			specifies a prefix and related parameters that the client
#			wants to be delegated. Multiple prefixes can be speci-
#			fied, each of which is described as a separate prefix
#			substatement. dhcp6c will include all the prefixes (and
#			related parameters) in Solicit messages, as an IA_PD pre-
#			fix option encapsulated in the corresponding IA_PD
#			option. Note, however, that the server may or may not
#			respect the specified prefix parameters.
#
# Prefix interface statement
#  A prefix interface statement specifies configuration parameters of pre-
#  fixes on local interfaces that are derived from delegated prefixes. A
#  prefix interface statement can only appear as a substatement of an iden-
#  tity association statement with the type pd. The generic format of an
#  interface statement is as follows:
#
#  prefix-interface interface { substatements };
#		When an IPv6 prefix is delegated from a DHCPv6 server, dhcp6c
#		will assign a prefix on the interface unless the interface
#		receives the DHCPv6 message that contains the prefix with the
#		delegated prefix and the parameters provided in substatements.
#		Possible substatements are as follows:
#     sla-id ID ;
#			This statement specifies the identifier value of the
#			site-level aggregator (SLA) on the interface.
#     sla-len length ;
#			This statement specifies the length of the SLA ID in
#			bits. length must be a decimal number between 0 and 128.
#			If the length is not specified by this statement, the
#			default value 16 will be used.
#
# Authentication statement
#  An authentication statement defines a set of authentication parameters
#  used in DHCPv6 exchanges with the server(s). The format of an authenti-
#  cation statement is as follows:
#
#  authentication authname { substatements };
#		authname is a string which is unique among all authentication
#		statements in the configuration file. It will specify a particu-
#		lar set of authentication parameters when authentication option
#		is specified in the interface statement. Possible substatements
#		of the authentication statement are as follows:
#     protocol authprotocol ;
#			specifies the authentication protocol. Currently, the
#			only available protocol as authprotocol is delayed, which
#			means the DHCPv6 delayed authentication protocol.
#     algorithm authalgorithm ;
#			specifies the algorithm for this authentication. Cur-
#			rently, the only available algorithm is HMAC-MD5, which
#			can be specified as one of the followings: hmac-md5,
#			HMAC-MD5, hmacmd5, or HMACMD5. This substatement can be
#			omitted. In this case, HMAC-MD5 will be used as the
#			algorithm.
#     rdm replay-detection-method ;
#			specifies the replay protection method for this authenti-
#			cation. Currently, the only available method is
#			monocounter, which means the use of a monotonically
#			increasing counter. If this method is specified, dhcp6c
#			will use an NTP-format timestamp when it authenticates
#			the message. This substatement can be omitted, in which
#			case monocounter will be used as the method.
#
# Keyinfo statement
#  A keyinfo statement defines a secret key shared with the server(s) to
#  authenticate DHCPv6 messages. The format of a keyinfo statement is as
#  follows:
#
#  keyinfo keyname { substatements };
#		keyname is an arbitrary string. It does not affect client's
#		behavior but is provided for readability of log messages. Possi-
#		ble substatements of the keyinfo statement are as follows:
#     realm "realmname" ;
#			specifies the DHCP realm. realmname is an arbitrary
#			string, but is typically expected to be a domain name
#			like "kame.net" .
#     keyid ID ;
#			specifies the key identifier, ID, as a decimal number. A
#			secret key is uniquely identified within the client by
#			the DHCP realm and the key identifier.
#     secret "secret-value" ;
#			specifies the shared secret of this key. "secret-value"
#			is a base-64 encoded string of the secret.
#     expire "expiration-time" ;
#			specifies the expiration time of this key.
#			"expiration-time" should be formatted in one of the fol-
#			lowings: yyyy-mm-dd HH:MM, mm-dd HH:MM, or HH:MM, where
#			yyyy is the year with century (e.g., 2004), mm is the
#			month, dd is the day of the month, HH is the hour of
#			24-hour clock, and MM is the minute, each of which is
#			given as a decimal number. Additionally, a special key-
#			word forever can be specified as expiration-time, which
#			means the key has an infinite lifetime and never expires.
#			This substatement can be omitted, in which case forever
#			will be used by default.


interface ppp0 {
  send ia-pd 0;
};
id-assoc pd {
  prefix-interface ne0 {
   sla-id 1;
  };
};
